rules_version = '2';

// Firebase Storage security rules for CookIt Next Web
// Updated to allow public read access to recipe images for exploration
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to validate image file types for uploads
    function isValidImageUpload() {
      return request.resource.contentType.matches('image/.*');
    }
    
    // Helper function to check file size for uploads (max 10MB for images)
    function isValidSizeUpload() {
      return request.resource.size < 10 * 1024 * 1024;
    }
    
    // Recipe images - PUBLIC READ ACCESS for recipe exploration
    match /recipe-images/{userId}/{imageId} {
      // Allow public read access for recipe exploration (no auth required)
      allow read: if true;
      
      // Allow write access for authenticated users to their own images
      // with validation for image type and size
      allow write: if isAuthenticated() 
                   && isOwner(userId)
                   && (request.resource == null || // Allow delete
                       (isValidImageUpload() && isValidSizeUpload())); // Allow upload with validation
    }
    
    // Recipe images - also allow public access from any path for compatibility
    match /recipe-images/{imageId} {
      // Allow public read access for recipe exploration (no auth required)
      allow read: if true;
    }
    
    // Meal planning related files (if needed in the future)
    match /meal-plans/{userId}/{fileId} {
      // Allow read access for authenticated users to their own files
      allow read: if isAuthenticated() && isOwner(userId);
      
      // Allow write access for authenticated users to their own files
      // with validation for file type and size
      allow write: if isAuthenticated() 
                   && isOwner(userId)
                   && (request.resource == null || // Allow delete
                       (request.resource.contentType.matches('image/.*') && request.resource.size < 10 * 1024 * 1024) || // Images
                       (request.resource.contentType.matches('application/pdf') && request.resource.size < 5 * 1024 * 1024) || // PDFs
                       (request.resource.contentType.matches('text/.*') && request.resource.size < 1 * 1024 * 1024)); // Text files
    }
    
    // User profile images and avatars
    match /user-profiles/{userId}/{fileId} {
      // Allow read access for any authenticated user (for profile display)
      allow read: if isAuthenticated();
      
      // Allow write access for authenticated users to their own profile files
      allow write: if isAuthenticated() 
                   && isOwner(userId)
                   && (request.resource == null || // Allow delete
                       (isValidImageUpload() && isValidSizeUpload())); // Allow upload with validation
    }
    
    // Fallback rule - deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}

/*
ðŸ”¥ UPDATED STORAGE RULES: PUBLIC RECIPE IMAGE ACCESS ENABLED

Key Changes:
âœ… Recipe images are now publicly readable (no authentication required)
âœ… Recipe exploration works with images for all users
âœ… Other file types remain secure and private
âœ… Users can only upload/modify their own files

SECURITY FEATURES MAINTAINED:
âœ… Recipe image uploads require authentication
âœ… User profile images remain private
âœ… Meal plan files remain private
âœ… File type and size validation enforced
âœ… Users can only modify their own files

These rules now support:
- Public recipe image viewing (main feature)
- Secure file upload protection
- Authenticated file management
- Recipe exploration with visual content
*/